/* tslint:disable */
/* eslint-disable */
/**
 * P2P地震情報 API仕様書
 * - 商用・非商用問わず無償（無料）でご利用になれます。 [二次利用できます · P2P地震情報](https://www.p2pquake.net/secondary_use/) をご確認ください。 - 以下のレート制限があります。超えるとレスポンスが遅くなったり拒否 (HTTP ステータスコード 429) される場合があります。   - /history: 60 リクエスト/分 (IP アドレス毎)   - /jma: 10 リクエスト/分 (IP アドレス毎)
 *
 * The version of the OpenAPI document: 2.1.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "./runtime";
import type { JMAQuakeAllOfEarthquakeHypocenter } from "./JMAQuakeAllOfEarthquakeHypocenter";
import {
  JMAQuakeAllOfEarthquakeHypocenterFromJSON,
  JMAQuakeAllOfEarthquakeHypocenterFromJSONTyped,
  JMAQuakeAllOfEarthquakeHypocenterToJSON,
} from "./JMAQuakeAllOfEarthquakeHypocenter";

/**
 *
 * @export
 * @interface JMAQuakeAllOfEarthquake
 */
export interface JMAQuakeAllOfEarthquake {
  /**
   * 発生日時
   * @type {string}
   * @memberof JMAQuakeAllOfEarthquake
   */
  time: string;
  /**
   *
   * @type {JMAQuakeAllOfEarthquakeHypocenter}
   * @memberof JMAQuakeAllOfEarthquake
   */
  hypocenter?: JMAQuakeAllOfEarthquakeHypocenter;
  /**
   * 最大震度。震度情報が存在しない場合は-1となります。
   * @type {number}
   * @memberof JMAQuakeAllOfEarthquake
   */
  maxScale?: JMAQuakeAllOfEarthquakeMaxScaleEnum;
  /**
   * 国内への津波の有無
   * @type {string}
   * @memberof JMAQuakeAllOfEarthquake
   */
  domesticTsunami?: JMAQuakeAllOfEarthquakeDomesticTsunamiEnum;
  /**
   * 海外での津波の有無
   * @type {string}
   * @memberof JMAQuakeAllOfEarthquake
   */
  foreignTsunami?: JMAQuakeAllOfEarthquakeForeignTsunamiEnum;
}

/**
 * @export
 */
export const JMAQuakeAllOfEarthquakeMaxScaleEnum = {
  NUMBER_MINUS1: -1,
  NUMBER_10: 10,
  NUMBER_20: 20,
  NUMBER_30: 30,
  NUMBER_40: 40,
  NUMBER_45: 45,
  NUMBER_50: 50,
  NUMBER_55: 55,
  NUMBER_60: 60,
  NUMBER_70: 70,
} as const;
export type JMAQuakeAllOfEarthquakeMaxScaleEnum =
  typeof JMAQuakeAllOfEarthquakeMaxScaleEnum[keyof typeof JMAQuakeAllOfEarthquakeMaxScaleEnum];

/**
 * @export
 */
export const JMAQuakeAllOfEarthquakeDomesticTsunamiEnum = {
  None: "None(なし)",
  Unknown: "Unknown(不明)",
  Checking: "Checking(調査中)",
  NonEffective: "NonEffective(若干の海面変動が予想されるが、被害の心配なし)",
  Watch: "Watch(津波注意報)",
  Warning: "Warning(津波予報(種類不明))",
} as const;
export type JMAQuakeAllOfEarthquakeDomesticTsunamiEnum =
  typeof JMAQuakeAllOfEarthquakeDomesticTsunamiEnum[keyof typeof JMAQuakeAllOfEarthquakeDomesticTsunamiEnum];

/**
 * @export
 */
export const JMAQuakeAllOfEarthquakeForeignTsunamiEnum = {
  None: "None(なし)",
  Unknown: "Unknown(不明)",
  Checking: "Checking(調査中)",
  NonEffectiveNearby:
    "NonEffectiveNearby(震源の近傍で小さな津波の可能性があるが、被害の心配なし)",
  WarningNearby: "WarningNearby(震源の近傍で津波の可能性がある)",
  WarningPacific: "WarningPacific(太平洋で津波の可能性がある)",
  WarningPacificWide: "WarningPacificWide(太平洋の広域で津波の可能性がある)",
  WarningIndian: "WarningIndian(インド洋で津波の可能性がある)",
  WarningIndianWide: "WarningIndianWide(インド洋の広域で津波の可能性がある)",
  Potential: "Potential(一般にこの規模では津波の可能性がある)",
} as const;
export type JMAQuakeAllOfEarthquakeForeignTsunamiEnum =
  typeof JMAQuakeAllOfEarthquakeForeignTsunamiEnum[keyof typeof JMAQuakeAllOfEarthquakeForeignTsunamiEnum];

/**
 * Check if a given object implements the JMAQuakeAllOfEarthquake interface.
 */
export function instanceOfJMAQuakeAllOfEarthquake(value: object): boolean {
  let isInstance = true;
  isInstance = isInstance && "time" in value;

  return isInstance;
}

export function JMAQuakeAllOfEarthquakeFromJSON(
  json: any
): JMAQuakeAllOfEarthquake {
  return JMAQuakeAllOfEarthquakeFromJSONTyped(json, false);
}

export function JMAQuakeAllOfEarthquakeFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): JMAQuakeAllOfEarthquake {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    time: json["time"],
    hypocenter: !exists(json, "hypocenter")
      ? undefined
      : JMAQuakeAllOfEarthquakeHypocenterFromJSON(json["hypocenter"]),
    maxScale: !exists(json, "maxScale") ? undefined : json["maxScale"],
    domesticTsunami: !exists(json, "domesticTsunami")
      ? undefined
      : json["domesticTsunami"],
    foreignTsunami: !exists(json, "foreignTsunami")
      ? undefined
      : json["foreignTsunami"],
  };
}

export function JMAQuakeAllOfEarthquakeToJSON(
  value?: JMAQuakeAllOfEarthquake | null
): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    time: value.time,
    hypocenter: JMAQuakeAllOfEarthquakeHypocenterToJSON(value.hypocenter),
    maxScale: value.maxScale,
    domesticTsunami: value.domesticTsunami,
    foreignTsunami: value.foreignTsunami,
  };
}
