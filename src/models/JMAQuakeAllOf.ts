/* tslint:disable */
/* eslint-disable */
/**
 * P2P地震情報 API仕様書
 * - 商用・非商用問わず無償（無料）でご利用になれます。 [二次利用できます · P2P地震情報](https://www.p2pquake.net/secondary_use/) をご確認ください。 - 以下のレート制限があります。超えるとレスポンスが遅くなったり拒否 (HTTP ステータスコード 429) される場合があります。   - /history: 60 リクエスト/分 (IP アドレス毎)   - /jma: 10 リクエスト/分 (IP アドレス毎)
 *
 * The version of the OpenAPI document: 2.1.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "./runtime";
import type { JMAQuakeAllOfEarthquake } from "./JMAQuakeAllOfEarthquake";
import {
  JMAQuakeAllOfEarthquakeFromJSON,
  JMAQuakeAllOfEarthquakeFromJSONTyped,
  JMAQuakeAllOfEarthquakeToJSON,
} from "./JMAQuakeAllOfEarthquake";
import type { JMAQuakeAllOfIssue } from "./JMAQuakeAllOfIssue";
import {
  JMAQuakeAllOfIssueFromJSON,
  JMAQuakeAllOfIssueFromJSONTyped,
  JMAQuakeAllOfIssueToJSON,
} from "./JMAQuakeAllOfIssue";
import type { JMAQuakeAllOfPoints } from "./JMAQuakeAllOfPoints";
import {
  JMAQuakeAllOfPointsFromJSON,
  JMAQuakeAllOfPointsFromJSONTyped,
  JMAQuakeAllOfPointsToJSON,
} from "./JMAQuakeAllOfPoints";

/**
 * 地震情報
 * @export
 * @interface JMAQuakeAllOf
 */
export interface JMAQuakeAllOf {
  /**
   * 情報コード。常に551です。
   * @type {any}
   * @memberof JMAQuakeAllOf
   */
  code?: any | null;
  /**
   *
   * @type {JMAQuakeAllOfIssue}
   * @memberof JMAQuakeAllOf
   */
  issue: JMAQuakeAllOfIssue;
  /**
   *
   * @type {JMAQuakeAllOfEarthquake}
   * @memberof JMAQuakeAllOf
   */
  earthquake: JMAQuakeAllOfEarthquake;
  /**
   * 震度観測点の情報
   * @type {Array<JMAQuakeAllOfPoints>}
   * @memberof JMAQuakeAllOf
   */
  points?: Array<JMAQuakeAllOfPoints>;
}

/**
 * Check if a given object implements the JMAQuakeAllOf interface.
 */
export function instanceOfJMAQuakeAllOf(value: object): boolean {
  let isInstance = true;
  isInstance = isInstance && "issue" in value;
  isInstance = isInstance && "earthquake" in value;

  return isInstance;
}

export function JMAQuakeAllOfFromJSON(json: any): JMAQuakeAllOf {
  return JMAQuakeAllOfFromJSONTyped(json, false);
}

export function JMAQuakeAllOfFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): JMAQuakeAllOf {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    code: !exists(json, "code") ? undefined : json["code"],
    issue: JMAQuakeAllOfIssueFromJSON(json["issue"]),
    earthquake: JMAQuakeAllOfEarthquakeFromJSON(json["earthquake"]),
    points: !exists(json, "points")
      ? undefined
      : (json["points"] as Array<any>).map(JMAQuakeAllOfPointsFromJSON),
  };
}

export function JMAQuakeAllOfToJSON(value?: JMAQuakeAllOf | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    code: value.code,
    issue: JMAQuakeAllOfIssueToJSON(value.issue),
    earthquake: JMAQuakeAllOfEarthquakeToJSON(value.earthquake),
    points:
      value.points === undefined
        ? undefined
        : (value.points as Array<any>).map(JMAQuakeAllOfPointsToJSON),
  };
}
