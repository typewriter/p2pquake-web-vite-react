/* tslint:disable */
/* eslint-disable */
/**
 * P2P地震情報 API仕様書
 * - 商用・非商用問わず無償（無料）でご利用になれます。 [二次利用できます · P2P地震情報](https://www.p2pquake.net/secondary_use/) をご確認ください。 - 以下のレート制限があります。超えるとレスポンスが遅くなったり拒否 (HTTP ステータスコード 429) される場合があります。   - /history: 60 リクエスト/分 (IP アドレス毎)   - /jma: 10 リクエスト/分 (IP アドレス毎)
 *
 * The version of the OpenAPI document: 2.1.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "./runtime";
/**
 *
 * @export
 * @interface JMATsunamiAllOfAreas
 */
export interface JMATsunamiAllOfAreas {
  /**
   * 津波予報の種類
   * @type {string}
   * @memberof JMATsunamiAllOfAreas
   */
  grade?: JMATsunamiAllOfAreasGradeEnum;
  /**
   * 直ちに津波が来襲すると予想されているかどうか
   * @type {boolean}
   * @memberof JMATsunamiAllOfAreas
   */
  immediate?: boolean;
  /**
   * 津波予報区名。[気象庁｜津波予報区について](http://www.data.jma.go.jp/svd/eqev/data/joho/t-yohokuinfo.html)を参照。
   * @type {string}
   * @memberof JMATsunamiAllOfAreas
   */
  name?: string;
}

/**
 * @export
 */
export const JMATsunamiAllOfAreasGradeEnum = {
  MajorWarning: "MajorWarning (大津波警報)",
  Warning: "Warning (津波警報)",
  Watch: "Watch (津波注意報)",
  Unknown: "Unknown (不明)",
} as const;
export type JMATsunamiAllOfAreasGradeEnum =
  typeof JMATsunamiAllOfAreasGradeEnum[keyof typeof JMATsunamiAllOfAreasGradeEnum];

/**
 * Check if a given object implements the JMATsunamiAllOfAreas interface.
 */
export function instanceOfJMATsunamiAllOfAreas(value: object): boolean {
  let isInstance = true;

  return isInstance;
}

export function JMATsunamiAllOfAreasFromJSON(json: any): JMATsunamiAllOfAreas {
  return JMATsunamiAllOfAreasFromJSONTyped(json, false);
}

export function JMATsunamiAllOfAreasFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): JMATsunamiAllOfAreas {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    grade: !exists(json, "grade") ? undefined : json["grade"],
    immediate: !exists(json, "immediate") ? undefined : json["immediate"],
    name: !exists(json, "name") ? undefined : json["name"],
  };
}

export function JMATsunamiAllOfAreasToJSON(
  value?: JMATsunamiAllOfAreas | null
): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    grade: value.grade,
    immediate: value.immediate,
    name: value.name,
  };
}
