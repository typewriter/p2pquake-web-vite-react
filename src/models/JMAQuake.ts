/* tslint:disable */
/* eslint-disable */
/**
 * P2P地震情報 API仕様書
 * - 商用・非商用問わず無償（無料）でご利用になれます。 [二次利用できます · P2P地震情報](https://www.p2pquake.net/secondary_use/) をご確認ください。 - 以下のレート制限があります。超えるとレスポンスが遅くなったり拒否 (HTTP ステータスコード 429) される場合があります。   - /history: 60 リクエスト/分 (IP アドレス毎)   - /jma: 10 リクエスト/分 (IP アドレス毎)
 *
 * The version of the OpenAPI document: 2.1.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "./runtime";
import type { BasicData } from "./BasicData";
import {
  BasicDataFromJSON,
  BasicDataFromJSONTyped,
  BasicDataToJSON,
} from "./BasicData";
import type { JMAQuakeAllOf } from "./JMAQuakeAllOf";
import {
  JMAQuakeAllOfFromJSON,
  JMAQuakeAllOfFromJSONTyped,
  JMAQuakeAllOfToJSON,
} from "./JMAQuakeAllOf";
import type { JMAQuakeAllOfEarthquake } from "./JMAQuakeAllOfEarthquake";
import {
  JMAQuakeAllOfEarthquakeFromJSON,
  JMAQuakeAllOfEarthquakeFromJSONTyped,
  JMAQuakeAllOfEarthquakeToJSON,
} from "./JMAQuakeAllOfEarthquake";
import type { JMAQuakeAllOfIssue } from "./JMAQuakeAllOfIssue";
import {
  JMAQuakeAllOfIssueFromJSON,
  JMAQuakeAllOfIssueFromJSONTyped,
  JMAQuakeAllOfIssueToJSON,
} from "./JMAQuakeAllOfIssue";
import type { JMAQuakeAllOfPoints } from "./JMAQuakeAllOfPoints";
import {
  JMAQuakeAllOfPointsFromJSON,
  JMAQuakeAllOfPointsFromJSONTyped,
  JMAQuakeAllOfPointsToJSON,
} from "./JMAQuakeAllOfPoints";

/**
 *
 * @export
 * @interface JMAQuake
 */
export interface JMAQuake {
  /**
   * 情報を一意に識別するID
   * @type {string}
   * @memberof JMAQuake
   */
  id: string;
  /**
   * 情報コード。常に551です。
   * @type {any}
   * @memberof JMAQuake
   */
  code: any | null;
  /**
   * 受信日時。形式は `2006/01/02 15:04:05.999` です。
   * @type {string}
   * @memberof JMAQuake
   */
  time: string;
  /**
   *
   * @type {JMAQuakeAllOfIssue}
   * @memberof JMAQuake
   */
  issue: JMAQuakeAllOfIssue;
  /**
   *
   * @type {JMAQuakeAllOfEarthquake}
   * @memberof JMAQuake
   */
  earthquake: JMAQuakeAllOfEarthquake;
  /**
   * 震度観測点の情報
   * @type {Array<JMAQuakeAllOfPoints>}
   * @memberof JMAQuake
   */
  points?: Array<JMAQuakeAllOfPoints>;
}

/**
 * Check if a given object implements the JMAQuake interface.
 */
export function instanceOfJMAQuake(value: object): boolean {
  let isInstance = true;
  isInstance = isInstance && "id" in value;
  isInstance = isInstance && "code" in value;
  isInstance = isInstance && "time" in value;
  isInstance = isInstance && "issue" in value;
  isInstance = isInstance && "earthquake" in value;

  return isInstance;
}

export function JMAQuakeFromJSON(json: any): JMAQuake {
  return JMAQuakeFromJSONTyped(json, false);
}

export function JMAQuakeFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): JMAQuake {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: json["id"],
    code: json["code"],
    time: json["time"],
    issue: JMAQuakeAllOfIssueFromJSON(json["issue"]),
    earthquake: JMAQuakeAllOfEarthquakeFromJSON(json["earthquake"]),
    points: !exists(json, "points")
      ? undefined
      : (json["points"] as Array<any>).map(JMAQuakeAllOfPointsFromJSON),
  };
}

export function JMAQuakeToJSON(value?: JMAQuake | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id,
    code: value.code,
    time: value.time,
    issue: JMAQuakeAllOfIssueToJSON(value.issue),
    earthquake: JMAQuakeAllOfEarthquakeToJSON(value.earthquake),
    points:
      value.points === undefined
        ? undefined
        : (value.points as Array<any>).map(JMAQuakeAllOfPointsToJSON),
  };
}
