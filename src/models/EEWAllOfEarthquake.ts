/* tslint:disable */
/* eslint-disable */
/**
 * P2P地震情報 API仕様書
 * - 商用・非商用問わず無償（無料）でご利用になれます。 [二次利用できます · P2P地震情報](https://www.p2pquake.net/secondary_use/) をご確認ください。 - 以下のレート制限があります。超えるとレスポンスが遅くなったり拒否 (HTTP ステータスコード 429) される場合があります。   - /history: 60 リクエスト/分 (IP アドレス毎)   - /jma: 10 リクエスト/分 (IP アドレス毎)
 *
 * The version of the OpenAPI document: 2.1.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "./runtime";
import type { EEWAllOfEarthquakeHypocenter } from "./EEWAllOfEarthquakeHypocenter";
import {
  EEWAllOfEarthquakeHypocenterFromJSON,
  EEWAllOfEarthquakeHypocenterFromJSONTyped,
  EEWAllOfEarthquakeHypocenterToJSON,
} from "./EEWAllOfEarthquakeHypocenter";

/**
 * 地震の情報。ただし、取消の場合は値は設定されません。
 * @export
 * @interface EEWAllOfEarthquake
 */
export interface EEWAllOfEarthquake {
  /**
   * 地震発生時刻
   * @type {string}
   * @memberof EEWAllOfEarthquake
   */
  originTime: string;
  /**
   * 地震発現時刻
   * @type {string}
   * @memberof EEWAllOfEarthquake
   */
  arrivalTime: string;
  /**
   * 仮定震源要素の場合、値は "仮定震源要素" となります。
   * @type {string}
   * @memberof EEWAllOfEarthquake
   */
  condition?: string;
  /**
   *
   * @type {EEWAllOfEarthquakeHypocenter}
   * @memberof EEWAllOfEarthquake
   */
  hypocenter: EEWAllOfEarthquakeHypocenter;
}

/**
 * Check if a given object implements the EEWAllOfEarthquake interface.
 */
export function instanceOfEEWAllOfEarthquake(value: object): boolean {
  let isInstance = true;
  isInstance = isInstance && "originTime" in value;
  isInstance = isInstance && "arrivalTime" in value;
  isInstance = isInstance && "hypocenter" in value;

  return isInstance;
}

export function EEWAllOfEarthquakeFromJSON(json: any): EEWAllOfEarthquake {
  return EEWAllOfEarthquakeFromJSONTyped(json, false);
}

export function EEWAllOfEarthquakeFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): EEWAllOfEarthquake {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    originTime: json["originTime"],
    arrivalTime: json["arrivalTime"],
    condition: !exists(json, "condition") ? undefined : json["condition"],
    hypocenter: EEWAllOfEarthquakeHypocenterFromJSON(json["hypocenter"]),
  };
}

export function EEWAllOfEarthquakeToJSON(
  value?: EEWAllOfEarthquake | null
): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    originTime: value.originTime,
    arrivalTime: value.arrivalTime,
    condition: value.condition,
    hypocenter: EEWAllOfEarthquakeHypocenterToJSON(value.hypocenter),
  };
}
