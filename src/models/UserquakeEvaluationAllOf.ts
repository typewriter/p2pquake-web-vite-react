/* tslint:disable */
/* eslint-disable */
/**
 * P2P地震情報 API仕様書
 * - 商用・非商用問わず無償（無料）でご利用になれます。 [二次利用できます · P2P地震情報](https://www.p2pquake.net/secondary_use/) をご確認ください。 - 以下のレート制限があります。超えるとレスポンスが遅くなったり拒否 (HTTP ステータスコード 429) される場合があります。   - /history: 60 リクエスト/分 (IP アドレス毎)   - /jma: 10 リクエスト/分 (IP アドレス毎)
 *
 * The version of the OpenAPI document: 2.1.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "./runtime";
import type { UserquakeEvaluationAllOfAreaConfidences } from "./UserquakeEvaluationAllOfAreaConfidences";
import {
  UserquakeEvaluationAllOfAreaConfidencesFromJSON,
  UserquakeEvaluationAllOfAreaConfidencesFromJSONTyped,
  UserquakeEvaluationAllOfAreaConfidencesToJSON,
} from "./UserquakeEvaluationAllOfAreaConfidences";

/**
 * 地震感知情報の評価結果です。
 * @export
 * @interface UserquakeEvaluationAllOf
 */
export interface UserquakeEvaluationAllOf {
  /**
   * 情報コード。常に9611です。
   * @type {any}
   * @memberof UserquakeEvaluationAllOf
   */
  code?: any | null;
  /**
   * 件数
   * @type {number}
   * @memberof UserquakeEvaluationAllOf
   */
  count: number;
  /**
   * P2P地震情報 Beta3 における信頼度（0～1）
   * 0: 非表示、0.97015: レベル1、0.96774: レベル2、0.97024: レベル3、0.98052: レベル4。
   * 値は適合率 (precision) です。
   * @type {number}
   * @memberof UserquakeEvaluationAllOf
   */
  confidence: number;
  /**
   * 開始日時。地震感知情報のイベントを一意に識別するキーとなります。
   * 形式は `2006/01/02 15:04:05.999` です。
   * @type {string}
   * @memberof UserquakeEvaluationAllOf
   */
  startedAt?: string;
  /**
   * 更新日時。形式は `2006/01/02 15:04:05.999` です。
   * @type {string}
   * @memberof UserquakeEvaluationAllOf
   */
  updatedAt?: string;
  /**
   * 評価日時。形式は `2006/01/02 15:04:05.999` です。
   * @type {string}
   * @memberof UserquakeEvaluationAllOf
   */
  time?: string;
  /**
   * 地域ごとの信頼度情報
   * @type {{ [key: string]: UserquakeEvaluationAllOfAreaConfidences; }}
   * @memberof UserquakeEvaluationAllOf
   */
  areaConfidences?: { [key: string]: UserquakeEvaluationAllOfAreaConfidences };
}

/**
 * Check if a given object implements the UserquakeEvaluationAllOf interface.
 */
export function instanceOfUserquakeEvaluationAllOf(value: object): boolean {
  let isInstance = true;
  isInstance = isInstance && "count" in value;
  isInstance = isInstance && "confidence" in value;

  return isInstance;
}

export function UserquakeEvaluationAllOfFromJSON(
  json: any
): UserquakeEvaluationAllOf {
  return UserquakeEvaluationAllOfFromJSONTyped(json, false);
}

export function UserquakeEvaluationAllOfFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): UserquakeEvaluationAllOf {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    code: !exists(json, "code") ? undefined : json["code"],
    count: json["count"],
    confidence: json["confidence"],
    startedAt: !exists(json, "started_at") ? undefined : json["started_at"],
    updatedAt: !exists(json, "updated_at") ? undefined : json["updated_at"],
    time: !exists(json, "time") ? undefined : json["time"],
    areaConfidences: !exists(json, "area_confidences")
      ? undefined
      : mapValues(
        json["area_confidences"],
        UserquakeEvaluationAllOfAreaConfidencesFromJSON
      ),
  };
}

export function UserquakeEvaluationAllOfToJSON(
  value?: UserquakeEvaluationAllOf | null
): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    code: value.code,
    count: value.count,
    confidence: value.confidence,
    started_at: value.startedAt,
    updated_at: value.updatedAt,
    time: value.time,
    area_confidences:
      value.areaConfidences === undefined
        ? undefined
        : mapValues(
          value.areaConfidences,
          UserquakeEvaluationAllOfAreaConfidencesToJSON
        ),
  };
}
