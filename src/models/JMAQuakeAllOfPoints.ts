/* tslint:disable */
/* eslint-disable */
/**
 * P2P地震情報 API仕様書
 * - 商用・非商用問わず無償（無料）でご利用になれます。 [二次利用できます · P2P地震情報](https://www.p2pquake.net/secondary_use/) をご確認ください。 - 以下のレート制限があります。超えるとレスポンスが遅くなったり拒否 (HTTP ステータスコード 429) される場合があります。   - /history: 60 リクエスト/分 (IP アドレス毎)   - /jma: 10 リクエスト/分 (IP アドレス毎)
 *
 * The version of the OpenAPI document: 2.1.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "./runtime";
/**
 *
 * @export
 * @interface JMAQuakeAllOfPoints
 */
export interface JMAQuakeAllOfPoints {
  /**
   * 都道府県
   * @type {string}
   * @memberof JMAQuakeAllOfPoints
   */
  pref: string;
  /**
   * 震度観測点名称（震度速報の場合は [気象庁 | 緊急地震速報や震度情報で用いる区域の名称](http://www.data.jma.go.jp/svd/eqev/data/joho/shindo-name.html) に記載のある区域名）
   * @type {string}
   * @memberof JMAQuakeAllOfPoints
   */
  addr: string;
  /**
   * 区域名かどうか
   * @type {boolean}
   * @memberof JMAQuakeAllOfPoints
   */
  isArea: boolean;
  /**
   * 震度
   * @type {number}
   * @memberof JMAQuakeAllOfPoints
   */
  scale: JMAQuakeAllOfPointsScaleEnum;
}

/**
 * @export
 */
export const JMAQuakeAllOfPointsScaleEnum = {
  NUMBER_10: 10,
  NUMBER_20: 20,
  NUMBER_30: 30,
  NUMBER_40: 40,
  NUMBER_45: 45,
  NUMBER_46: 46,
  NUMBER_50: 50,
  NUMBER_55: 55,
  NUMBER_60: 60,
  NUMBER_70: 70,
} as const;
export type JMAQuakeAllOfPointsScaleEnum =
  typeof JMAQuakeAllOfPointsScaleEnum[keyof typeof JMAQuakeAllOfPointsScaleEnum];

/**
 * Check if a given object implements the JMAQuakeAllOfPoints interface.
 */
export function instanceOfJMAQuakeAllOfPoints(value: object): boolean {
  let isInstance = true;
  isInstance = isInstance && "pref" in value;
  isInstance = isInstance && "addr" in value;
  isInstance = isInstance && "isArea" in value;
  isInstance = isInstance && "scale" in value;

  return isInstance;
}

export function JMAQuakeAllOfPointsFromJSON(json: any): JMAQuakeAllOfPoints {
  return JMAQuakeAllOfPointsFromJSONTyped(json, false);
}

export function JMAQuakeAllOfPointsFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): JMAQuakeAllOfPoints {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    pref: json["pref"],
    addr: json["addr"],
    isArea: json["isArea"],
    scale: json["scale"],
  };
}

export function JMAQuakeAllOfPointsToJSON(
  value?: JMAQuakeAllOfPoints | null
): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    pref: value.pref,
    addr: value.addr,
    isArea: value.isArea,
    scale: value.scale,
  };
}
